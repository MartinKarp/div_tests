c- constants -----------------------------------------------------------

#define tSTATSTART uparam(1) /* start time for averaging */
#define tSTATFREQ  uparam(2) /* output frequency for statistics */

c data extraction along wall normal direction
#define INTP_NMAX 200 /* number of sample points */
#define XCINT 1.0     /* x coordinate of 1D line*/
#define ZCINT 1.0     /* z coordinate of 1D line */

c mesh dimensions
#define BETAM 2.4     /* wall normal stretching parameter */
#define PI (4.*atan(1.))
#define XLEN (4.*PI)
#define ZLEN 4./3.*PI
#define NUMBER_ELEMENTS_X 16
#define NUMBER_ELEMENTS_Y 12
#define NUMBER_ELEMENTS_Z 8

c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e

      utrans = 1.
      udiff  = param(2)

      if (ifield .eq. 2) then
         e = gllel(ieg)
         udiff = param(8)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0 
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol =  0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      real x0(3)
      data x0 /0.0, 0.0, 0.0/ 
      save x0

      integer icalld
      save    icalld
      data    icalld /0/

      real atime,timel
      save atime,timel

      integer ntdump
      save    ntdump

      real    rwk(INTP_NMAX,ldim+1) ! r, s, t, dist2
      integer iwk(INTP_NMAX,3)      ! code, proc, el 
      save    rwk, iwk

      integer nint, intp_h
      save    nint, intp_h

      logical iffpts
      save iffpts

      real xint(INTP_NMAX),yint(INTP_NMAX),zint(INTP_NMAX)
      save xint, yint, zint
      save igs_x, igs_z

      parameter(nstat=9)
      real ravg(lx1*ly1*lz1*lelt,nstat)
      real stat(lx1*ly1*lz1*lelt,nstat)
      real stat_y(INTP_NMAX*nstat)
      save ravg, stat, stat_y

      save dragx_avg

      logical ifverbose
      common /gaaa/    wo1(lx1,ly1,lz1,lelv)
     &              ,  wo2(lx1,ly1,lz1,lelv)
     &              ,  wo3(lx1,ly1,lz1,lelv)

      real tplus
      real tmn, tmx

      integer bIDs(1)
      save iobj_wall

!!!      real T((LX1,LY1,LZ1,LELT)

      n     = nx1*ny1*nz1*nelv
      nelx  = NUMBER_ELEMENTS_X
      nely  = NUMBER_ELEMENTS_Y
      nelz  = NUMBER_ELEMENTS_Z

      if (istep.eq.0) then
         bIDs(1) = 1
         call create_obj(iobj_wall,bIDs,1)
         nm = iglsum(nmember(iobj_wall),1)
         if(nid.eq.0) write(6,*) 'obj_wall nmem:', nm 
         call prepost(.true.,'  ')
      endif
!     to output lambda2
      IFTO      = .false.

      if (ifoutfld) then
         IFTO      = .true.
         call veldiv(T)
!     face averaging
c#ifdef AMR
c         call h1_proj(T,NX1,NY1,NZ1)
c#else
c         call dssum(T,NX1,NY1,NZ1)
c         ntot = nx1*ny1*nz1*nelv
c         call col2 (T,VMULT,ntot)
c#endif
      endif


c      ubar = glsc2(vx,bm1,n)/volvm1
c      e2   = glsc3(vy,bm1,vy,n)+glsc3(vz,bm1,vz,n)
c      e2   = e2/volvm1
c      if (nfield.gt.1) then
c        tmn  = glmin(t,n)
c        tmx  = glmax(t,n)
c      endif
c      if(nid.eq.0) write(6,2) time,ubar,e2,tmn,tmx
c   2               format(1p5e13.4,' monitor')
c
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      if (y.lt.0) temp = 1.0
      if (y.gt.0) temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer idum
      save    idum 
      data    idum / 0 /

      real C, k, kx, ky
      real ran, eps1, alpha, beta, eps

      Re_tau = 180
      C      = 5.17
      k      = 0.41

      yp = (1-y)*Re_tau
      if (y.lt.0) yp = (1+y)*Re_tau
      
      ! Reichardt function
      ux  = 1/k*log(1+k*yp) + (C - (1/k)*log(k)) *
     $      (1 - exp(-yp/11) - yp/11*exp(-yp/3))
      ux  = ux * Re_tau/2800.0

      eps = 0.05
      kx  = 3
      kz  = 4

      alpha = (kx * 2.0*PI)/(XLEN)
      beta  = (kz * 2.0*PI)/(ZLEN)
      ! add perturbation to trigger turbulence 
      ux  = ux  + eps*beta  * sin(alpha*x)*cos(beta*z) 
      uy  =       eps       * sin(alpha*x)*sin(beta*z)
      uz  =      -eps*alpha * cos(alpha*x)*sin(beta*z)

      ! thin boundary layer at the lower wall
      !      gamma = 5e-6 ! initial thickness
      !temp = erfc((1+y)/sqrt(1./param(8) * gamma))
      !    second, small scale perturbation
        eps = 0.005
        kx  = 17
        kz  = 13
        alpha = kx * 2*PI/(XLEN)
        beta  = kz * 2*PI/(ZLEN)
        ux  = ux + eps*beta  * sin(alpha*x)*cos(beta*z)
        uy  = uy + eps       * sin(alpha*x)*sin(beta*z)
        uz  = uz -eps*alpha * cos(alpha*x)*sin(beta*z)

      ! ! ! finally, random perturbations only in y
        eps1 = 0.001
        ran = sin(-20*x*z+y**3*tan(x*z**2)+100*z*y-20*sin(x*y*z)**5)
        uy  = uy + eps1*ran


      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'TOTAL'     ! guarantees GLL mapping of mesh.

      real viscous_layer, el_h, visc_el_h, center_el_h, dist_from_wall
      integer el_in_y, el_in_visc_lay

      n = nelv * 2**ldim
      xmin = glmin(xc,n)
      xmax = glmax(xc,n)
      ymin = glmin(yc,n)
      ymax = glmax(yc,n)
      zmin = glmin(zc,n)
      zmax = glmax(zc,n)

      ! rescale mesh
      el_in_y = 18
      el_in_visc_lay = 2
      viscous_layer = 0.0888889
      el_h = 2.0/el_in_y
      visc_el_h = viscous_layer/el_in_visc_lay
      center_el_h = (1.0-viscous_layer)/(el_in_y/2-el_in_visc_lay)

      xscale = XLEN/(xmax-xmin)
      yscale = 1./(ymax-ymin)
      zscale = ZLEN/(zmax-zmin)

      do i=1,n
         xc(i,1) = xscale*xc(i,1)
         y = yc(i,1)
         if ((1-abs(y)) .le. (el_in_visc_lay*el_h)) then
            dist_from_wall = (1-abs(y))/el_h*visc_el_h
         else
            dist_from_wall = viscous_layer + (1-abs(y)- 
     $            el_in_visc_lay*el_h)/el_h*center_el_h
         end if
         if (y .gt. 0.0) yc(i,1) =  1.0 - dist_from_wall
         if (y .lt. 0.0) yc(i,1) = -1.0 + dist_from_wall
!!         yc(i,1) = yscale*yc(i,1)
!!         yc(i,1) = tanh(BETAM*(2*yc(i,1)-1))/tanh(BETAM)
         zc(i,1) = zscale*zc(i,1)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2   ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'


      do iel=1,nelt
      do ifc=1,2*ndim
         if (cbc(ifc,iel,1) .eq. 'W  ') boundaryID(ifc,iel) = 1 
         cbc(ifc,iel,2) = cbc(ifc,iel,1) 
         if (cbc(ifc,iel,1) .eq. 'W  ') cbc(ifc,iel,2) = 't  '
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      param(54) = -1  ! use >0 for const flowrate or <0 bulk vel
                      ! flow direction is given by (1=x, 2=y, 3=z) 
      param(55) = 1.0 ! flowrate/bulk-velocity 

      return
      end
c-----------------------------------------------------------------------
!=======================================================================
      subroutine veldiv(div)
      implicit none

      include 'SIZE'
      include 'SOLN'
      include 'INPUT'               ! if3d, [XYZ]C
      include 'GEOM'
      include 'PARALLEL'

      ! argument list
      real div(LX1,LY1,LZ1,LELT)
      real lvel(LX1,LY1,LZ1,LELT,3) ! velocity array
      real dudx(LX1,LY1,LZ1,LELT,3) ! velocity derivatives; U
      real dvdx(LX1,LY1,LZ1,LELT,3) ! V
      real dwdx(LX1,LY1,LZ1,LELT,3) ! W
      real vort(LX1,LY1,LZ1,LELT,3) ! vorticity
      real pres(LX1,LY1,LZ1,LELT)   ! pressure

      ! local variables
      integer itmp              ! dummy variable
      integer il, jl            ! loop index
      integer ifll              ! field number for object definition
      real vrtmp(lx1*lz1)       ! work array for face
      real vrtmp2(2)            ! work array
      integer nvert             ! number of vortices of an element
      real rnvert, ctmpx        ! rnvert=1/nvert, x-coordinate

      ! functions
      real vlsum
!-----------------------------------------------------------------------
      ! Velocity transformation; simple copy
      itmp = NX1*NY1*NZ1*NELV
      call copy(lvel(1,1,1,1,1),VX,itmp)
      call copy(lvel(1,1,1,1,2),VY,itmp)
      call copy(lvel(1,1,1,1,3),VZ,itmp)

      ! Derivative transformation
      ! No transformation
      call gradm1(dudx(1,1,1,1,1),dudx(1,1,1,1,2),dudx(1,1,1,1,3),
     $      lvel(1,1,1,1,1))
      call gradm1(dvdx(1,1,1,1,1),dvdx(1,1,1,1,2),dvdx(1,1,1,1,3),
     $      lvel(1,1,1,1,2))
      call gradm1(dwdx(1,1,1,1,1),dwdx(1,1,1,1,2),dwdx(1,1,1,1,3),
     $      lvel(1,1,1,1,3))

      call add4(div,
     $ 	dudx(1,1,1,1,1),dvdx(1,1,1,1,2),dwdx(1,1,1,1,3),itmp)
      !call copy(div,dudx,itmp)
      return
      end subroutine
!======================================================================
